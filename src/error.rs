use std::num::{
    ParseFloatError,
    ParseIntError,
};

use derive_more::{
    Display,
    From,
};

use wrapped_errs::{
    IoError,
    OsString,
};

mod wrapped_errs;
/// All errors generated by this program are variants of this [Error] type.  See the [Error] type's variants for more
/// details.
#[derive(Debug, Display, From, PartialEq)]
pub enum Error {
    /// Returned when a provided argument is not convertible to `UTF-8` (required in order to be a [String] in Rust).
    /// The argument is provided as this variant's payload for informational purposes.
    #[display(fmt = "{}: {:?}", "crate::msg::ERR_ARG_NOT_CONVERTIBLE_TO_UTF_8", "_0")]
    ArgNotConvertibleToUtf8(OsString),

    /// Returned when a provided argument is not convertible to [NonZeroUsize].  The failing argument is
    /// provided as this variant's payload for informational purposes.
    #[display(fmt = "{}: {}", "crate::msg::ERR_ARG_NOT_CONVERTIBLE_TO_NON_ZERO_USIZE", "_0")]
    ArgNotConvertibleToNonZeroUsize(usize),

    /// Returned when a provided value is not convertible to a probability, which ranges from 0.0 to 1.0, inclusive.
    /// The invalid value is provided as this variant's payload for informational purposes.
    #[display(fmt = "{}: {}", "crate::msg::ERR_INVALID_PROBABILITY_RANGE", "_0")]
    InvalidProbabilityRange(f64),

    /// IoError
    #[display(fmt = "{}: {:?}", "crate::msg::ERR_IO", "_0")]
    IoError(IoError),

    /// Returned when a provided argument is not convertible to an integer.  The original error is provided as this
    /// variant's payload for informational purposes.
    #[display(fmt = "{}: {:?}", "crate::msg::ERR_PARSE_INT", "_0")]
    ParseInt(ParseIntError),

    /// Returned when a provided argument is not convertible to an floating point value.  The original error is provided
    /// as this variant's payload for informational purposes.
    #[display(fmt = "{}: {:?}", "crate::msg::ERR_PARSE_FLOAT", "_0")]
    ParseFloat(ParseFloatError),
}
